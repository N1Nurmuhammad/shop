from apps.ad.models import AdPictureModelfrom api.v1.ad.serializers import AdPictureSerializerfrom rest_framework.decorators import api_view, permission_classesfrom drf_yasg.utils import swagger_auto_schemafrom rest_framework.response import Responsefrom rest_framework.permissions import IsAuthenticatedfrom rest_framework import statusfrom django.shortcuts import get_object_or_404# @swagger_auto_schema(method="get", tags=["ad-picture"])# @api_view(['GET'])# def get_subcategories_view(request):#     subcategories = AdPictureModel.objects.all()#     serializer = AdPictureSerializer(subcategories, many=True)#     return Response(serializer.data)@swagger_auto_schema(method="get", tags=["ad-picture"])@api_view(['GET'])@permission_classes((IsAuthenticated,))def get_ad_picture_view(request, pk):    """pk - from AdModel"""    ad = get_object_or_404(AdPictureModel, pk=pk)    ad_picture = AdPictureModel.objects.filter(ad=ad)    serializer = AdPictureSerializer(ad_picture, )    return Response(serializer.data)@swagger_auto_schema(method="post", tags=["ad-picture"], request_body=AdPictureSerializer)@api_view(['POST'])@permission_classes((IsAuthenticated,))def create_ad_picture_view(request):    serializer = AdPictureSerializer(data=request.data)    if serializer.is_valid():        serializer.save()        return Response(serializer.data, status=status.HTTP_201_CREATED)    return Response(status=status.HTTP_400_BAD_REQUEST)# @permission_classes((IsAuthenticated,))# @swagger_auto_schema(method="put", tags=["ad-picture"], request_body=AdPictureSerializer)# @api_view(['PUT'])# def update_ad_picture_view(request, pk):#     fav_ad = get_object_or_404(AdPictureModel, pk=pk)#     serializer = AdPictureSerializer(fav_ad, data=request.data)#     if serializer.is_valid():#         serializer.save()#         return Response(serializer.data, status=status.HTTP_201_CREATED)#     return Response(status=status.HTTP_400_BAD_REQUEST)@permission_classes((IsAuthenticated,))@swagger_auto_schema(method="delete", tags=["ad-picture"])@api_view(['DELETE'])def delete_ad_picture_view(request, pk):    ad_picture = get_object_or_404(AdPictureModel, pk=pk)    if ad_picture.ad.owner == request.user:        ad_picture.delete()        return Response(status=status.HTTP_204_NO_CONTENT)    return Response(status=status.HTTP_401_UNAUTHORIZED)